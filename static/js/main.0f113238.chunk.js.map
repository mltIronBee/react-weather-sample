{"version":3,"sources":["redux/reducers/index.ts","containers/pages/home/index.tsx","App.tsx","redux/store/index.ts","theme.ts","reportWebVitals.ts","index.tsx","components/common/loading-component.styles.tsx","components/common/loading-component.tsx","components/common/page-loader.styles.ts","components/common/page-loader.tsx","components/common/tab-panel.tsx","utils/geolocation-api.ts","utils/weather-api.ts","components/snackbar/snackbar.tsx","containers/snackbar/snackbar-context.tsx","services/weather/index.ts","redux/reducers/weather/index.ts"],"names":["rootReducer","combineReducers","weather","weatherReducer","Home","lazy","HomePage","fallback","App","initialState","prefersDarkMode","useMediaQuery","theme","useMemo","createMuiTheme","palette","type","generateTheme","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","preloadedState","render","StrictMode","document","getElementById","makeStyles","createStyles","loadingWrapper","position","display","height","width","loadingIndicatorContainer","backgroundColor","top","left","right","bottom","flexDirection","justifyContent","alignItems","zIndex","mobileStepper","LoadingComponent","props","classes","useStyles","loading","className","CircularProgress","Typography","children","container","PageLoader","TabPanel","value","index","wrapperProps","role","hidden","Box","p","instance","axios","create","baseURL","search","city","get","params","q","format","limit","reverseSearch","lat","lon","zoom","getCurrentPosition","Promise","resolve","reject","navigator","geolocation","coords","latitude","longitude","error","message","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","Error","getForecast","units","exclude","appid","process","getWeatherIcon","icon","Snackbar","open","onClose","onExited","autoHideDuration","action","IconButton","size","aria-label","onClick","Alert","elevation","variant","severity","defaultProps","isOpened","isHidden","messageQueue","addMessage","payload","closeSnackbar","openSnackbar","removeMessage","snackbarReducer","state","key","slice","SnackbarContext","createContext","snackbar","show","success","info","warning","SnackbarProvider","useReducer","dispatch","useEffect","length","handleShowMessage","useCallback","Date","now","handleSuccess","handleInfo","handleWarning","handleError","handleClose","_","reason","handleExited","contextValue","Provider","getWeatherForecast","a","geolocationApi","geolocationResponse","coordinates","data","lng","weatherApi","current","daily","clouds","date","dt","feelsLike","feels_like","humidity","pressure","rain","snow","sunrise","sunset","temperature","temp","uvIndex","uvi","visibility","windDeg","wind_deg","windSpeed","wind_speed","forecast","map","item","dayOfWeek","DateTime","fromMillis","weekdayLong","minTemperature","min","maxTemperature","max","weatherSlice","createSlice","name","isLoading","errorMessage","reducers","getForecastStart","getForecastSuccess","getForecastError","actions","fetchWeatherForecast","toString"],"mappings":"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","file":"static/js/main.0f113238.chunk.js","sourcesContent":["/* istanbul ignore file */\nimport { combineReducers } from \"@reduxjs/toolkit\";\nimport weatherReducer, { IWeatherState, WeatherActions } from \"@redux/reducers/weather\";\n\nexport interface IAppState {\n\tweather: IWeatherState;\n}\n\nexport type AppActions = WeatherActions;\n\nexport const rootReducer = combineReducers({ weather: weatherReducer });\n\nexport type RootReducer = ReturnType<typeof rootReducer>;\n","import React, { Suspense, lazy } from \"react\";\nimport { PageLoader } from \"@components/common\";\n\nconst Home = lazy(() => import(\"@src/containers/pages/home/home-page\"));\n\nexport const HomePage: React.FC = () => (\n\t<Suspense fallback={<PageLoader />}>\n\t\t<Home />\n\t</Suspense>\n);\n","import React, { useMemo } from \"react\";\nimport { HomePage } from \"@src/containers/pages/home\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { generateTheme } from \"@src/theme\";\n\nfunction App(): JSX.Element {\n\tconst prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n\tconst theme = useMemo(() => generateTheme(prefersDarkMode), [prefersDarkMode]);\n\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<CssBaseline />\n\t\t\t<HomePage />\n\t\t</ThemeProvider>\n\t);\n}\n\nexport default App;\n","/* istanbul ignore file */\nimport { configureStore, EnhancedStore, ThunkAction } from \"@reduxjs/toolkit\";\nimport { rootReducer, IAppState, AppActions } from \"@redux/reducers\";\n\nexport type AppThunk<T = any> = ThunkAction<T, IAppState, unknown, AppActions>;\n\nexport default (initialState?: IAppState): EnhancedStore<IAppState, AppActions> => {\n\tconst store = configureStore<IAppState, AppActions>({\n\t\treducer: rootReducer,\n\t\tpreloadedState: initialState,\n\t});\n\n\tif (process.env.NODE_ENV === \"development\" && module.hot) {\n\t\tmodule.hot.accept(\"@redux/reducers\", () => {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-var-requires\n\t\t\tconst newRootReducer = require(\"@redux/reducers\").default;\n\n\t\t\tstore.replaceReducer(newRootReducer);\n\t\t});\n\t}\n\n\treturn store;\n};\n","import { createMuiTheme, Theme } from \"@material-ui/core/styles\";\n\nexport const generateTheme = (prefersDarkMode = false): Theme =>\n\tcreateMuiTheme({\n\t\tpalette: {\n\t\t\ttype: prefersDarkMode ? \"dark\" : \"light\",\n\t\t},\n\t});\n","/* istanbul ignore file */\nimport { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","/* istanbul ignore file */\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport createStore from \"@redux/store\";\nimport { SnackbarProvider } from \"@containers/snackbar\";\nimport App from \"@src/App\";\nimport reportWebVitals from \"@src/reportWebVitals\";\n\nconst store = createStore();\n\nrender(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<SnackbarProvider>\n\t\t\t\t<App />\n\t\t\t</SnackbarProvider>\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Theme } from \"@material-ui/core\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\n\nexport default makeStyles((theme: Theme) =>\n\tcreateStyles({\n\t\tloadingWrapper: {\n\t\t\tposition: \"relative\",\n\t\t\tdisplay: \"inline-block\",\n\t\t\theight: \"100%\",\n\t\t\twidth: \"100%\",\n\t\t},\n\t\tloadingIndicatorContainer: {\n\t\t\tdisplay: \"flex\",\n\t\t\tposition: \"absolute\",\n\t\t\tbackgroundColor: \"rgba(255, 255, 255, 0.75)\",\n\t\t\ttop: 0,\n\t\t\tleft: 0,\n\t\t\tright: 0,\n\t\t\tbottom: 0,\n\t\t\tflexDirection: \"column\",\n\t\t\tjustifyContent: \"center\",\n\t\t\talignItems: \"center\",\n\t\t\tzIndex: theme.zIndex.mobileStepper - 1,\n\t\t},\n\t}),\n);\n","import React from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport useStyles from \"@components/common/loading-component.styles\";\n\nexport interface ILoadingComponentProps {\n\tloading: boolean;\n\tchildren: JSX.Element;\n}\n\nexport const LoadingComponent: React.FC<ILoadingComponentProps> = (props) => {\n\tconst classes = useStyles();\n\n\tif (!props.loading) {\n\t\treturn props.children;\n\t}\n\n\treturn (\n\t\t<div className={classes.loadingWrapper}>\n\t\t\t<div className={classes.loadingIndicatorContainer}>\n\t\t\t\t<CircularProgress />\n\t\t\t\t<Typography>Loading...</Typography>\n\t\t\t</div>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n","import { createStyles, makeStyles } from \"@material-ui/core/styles\";\n\nexport default makeStyles(\n\tcreateStyles({\n\t\tcontainer: {\n\t\t\tposition: \"absolute\",\n\t\t\ttop: 0,\n\t\t\tleft: 0,\n\t\t\tright: 0,\n\t\t\tbottom: 0,\n\t\t},\n\t}),\n);\n","import React from \"react\";\nimport { LoadingComponent } from \"@components/common\";\nimport useStyles from \"@components/common/page-loader.styles\";\n\nexport const PageLoader: React.FC = () => {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<div className={classes.container}>\n\t\t\t<LoadingComponent loading>\n\t\t\t\t<div className={classes.container}></div>\n\t\t\t</LoadingComponent>\n\t\t</div>\n\t);\n};\n","import React, { HTMLAttributes } from \"react\";\nimport Box, { BoxProps } from \"@material-ui/core/Box\";\n\nexport interface ITabPanelProps<T = any> extends HTMLAttributes<HTMLDivElement> {\n\tvalue: T;\n\tindex: T;\n\twrapperProps?: BoxProps;\n\tchildren: React.ReactNode;\n}\n\nexport function TabPanel<T = any>({ value, index, children, wrapperProps, ...props }: ITabPanelProps<T>): JSX.Element {\n\treturn (\n\t\t<div role=\"tabpanel\" hidden={value !== index} {...props}>\n\t\t\t<Box {...wrapperProps} p={2}>\n\t\t\t\t{children}\n\t\t\t</Box>\n\t\t</div>\n\t);\n}\n","import axios, { AxiosPromise } from \"axios\";\n\nconst instance = axios.create({\n\tbaseURL: \"https://nominatim.openstreetmap.org\",\n});\n\nconst ZOOM_LEVEL_CITY = 10;\n\nexport type BoundingBox = [minLat: string, maxLat: string, minLon: string, maxLon: string];\n\n/* eslint-disable camelcase */\nexport interface ISearchResponse {\n\tplace_id: number;\n\tlicence: string;\n\tosm_type: string;\n\tosm_id: string;\n\tboundingbox: BoundingBox;\n\tlat: string;\n\tlon: string;\n\tdisplay_name: string;\n\tclass: string;\n\ttype: string;\n\timportance: number;\n}\n\nexport interface IReverseSearchResponse {\n\tplace_id: number;\n\tlicence: string;\n\tosm_type: string;\n\tosm_id: string;\n\tlat: string;\n\tlon: string;\n\tdisplay_name: string;\n\taddress: {\n\t\tcity: string;\n\t\tcounty: string;\n\t\tstate: string;\n\t\tcountry: string;\n\t\tcountry_code: string;\n\t};\n\tboundingbox: BoundingBox;\n}\n/* eslint-enable camelcase */\n\nexport const search = (city: string): AxiosPromise<ISearchResponse[]> =>\n\tinstance.get(\"/search\", { params: { q: city, format: \"json\", limit: 1 } });\n\nexport const reverseSearch = (lat: number, lon: number): AxiosPromise<IReverseSearchResponse> =>\n\tinstance.get(\"/reverse\", { params: { lat, lon, zoom: ZOOM_LEVEL_CITY, format: \"json\" } });\n\nexport const getCurrentPosition = (): Promise<[lat: number, lng: number]> =>\n\tnew Promise((resolve, reject) => {\n\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\t(position) => {\n\t\t\t\tresolve([position.coords.latitude, position.coords.longitude]);\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\tlet message: string;\n\n\t\t\t\tswitch (error.code) {\n\t\t\t\t\tcase error.PERMISSION_DENIED:\n\t\t\t\t\t\tmessage = \"Cannot retrieve current location because permission was not granted\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase error.POSITION_UNAVAILABLE:\n\t\t\t\t\t\tmessage = \"Current position is not available\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase error.TIMEOUT:\n\t\t\t\t\t\tmessage = \"Geolocation request timed out\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmessage = \"Unexpected error has occurred while trying to determine current position\";\n\t\t\t\t}\n\n\t\t\t\treject(new Error(message));\n\t\t\t},\n\t\t);\n\t});\n","import axios, { AxiosPromise } from \"axios\";\n\nconst WEATHER_API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\nconst instance = axios.create({\n\tbaseURL: \"https://api.openweathermap.org/data/2.5\",\n});\n\nexport interface IDailyTemperature {\n\tmorn: number;\n\tday: number;\n\teve: number;\n\tnight: number;\n\tmin: number;\n\tmax: number;\n}\n\n/* eslint-disable camelcase */\nexport interface IGetForecastResponse {\n\tlat: number;\n\tlon: number;\n\ttimezone: string;\n\ttimezone_offset: number;\n\tcurrent: {\n\t\tdt: number;\n\t\tsunrise: number;\n\t\tsunset: number;\n\t\ttemp: number;\n\t\tfeels_like: number;\n\t\tpressure: number;\n\t\thumidity: number;\n\t\tdew_point: number;\n\t\tclouds: number;\n\t\tuvi: number;\n\t\tvisibility: number;\n\t\twind_speed: number;\n\t\twind_gust?: number;\n\t\twind_deg: number;\n\t\train?: {\n\t\t\t\"1h\": number;\n\t\t};\n\t\tsnow?: {\n\t\t\t\"1h\": number;\n\t\t};\n\t\tweather: {\n\t\t\tid: number;\n\t\t\tmain: string;\n\t\t\tdescription: string;\n\t\t\ticon: string;\n\t\t}[];\n\t};\n\tdaily: {\n\t\tdt: number;\n\t\tsunrise: number;\n\t\tsunset: number;\n\t\ttemp: IDailyTemperature;\n\t\tfeels_like: Omit<IDailyTemperature, \"min\" | \"max\">;\n\t\tpressure: number;\n\t\thumidity: number;\n\t\tdew_point: number;\n\t\twind_speed: number;\n\t\twind_gust?: number;\n\t\twind_deg: number;\n\t\tclouds: number;\n\t\tuvi: number;\n\t\tvisibility: number;\n\t\tpop: number;\n\t\train?: number;\n\t\tsnow?: number;\n\t\tweather: {\n\t\t\tid: number;\n\t\t\tmain: string;\n\t\t\tdescription: string;\n\t\t\ticon: string;\n\t\t}[];\n\t}[];\n}\n/* eslint-enable camelcase */\n\nexport const getForecast = (lat: number, lon: number): AxiosPromise<IGetForecastResponse> =>\n\tinstance.get(\"/onecall\", {\n\t\tparams: { lat, lon, units: \"metric\", exclude: \"minutely,hourly,alerts\", appid: WEATHER_API_KEY },\n\t});\n\nexport const getWeatherIcon = (icon: string): string => `http://openweathermap.org/img/wn/${icon}@2x.png`;\n","import React from \"react\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport MuiSnackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nexport interface ISnackbarProps {\n\ttype?: \"default\" | \"info\" | \"success\" | \"error\" | \"warning\";\n\tmessage: string;\n\topen: boolean;\n\tonClose: (event: React.SyntheticEvent | MouseEvent, reason?: string) => void;\n\tonExited: () => void;\n}\n\nexport const Snackbar: React.FC<ISnackbarProps> = (props) => {\n\tif (props.type === \"default\") {\n\t\treturn (\n\t\t\t<MuiSnackbar\n\t\t\t\topen={props.open}\n\t\t\t\tonClose={props.onClose}\n\t\t\t\tonExited={props.onExited}\n\t\t\t\tautoHideDuration={6000}\n\t\t\t\tmessage={props.message}\n\t\t\t\taction={\n\t\t\t\t\t<IconButton size=\"small\" aria-label=\"close\" onClick={props.onClose}>\n\t\t\t\t\t\t<CloseIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t}\n\t\t\t/>\n\t\t);\n\t}\n\n\treturn (\n\t\t<MuiSnackbar open={props.open} onClose={props.onClose} autoHideDuration={6000} onExited={props.onExited}>\n\t\t\t<Alert elevation={2} variant=\"filled\" severity={props.type} onClose={props.onClose}>\n\t\t\t\t{props.message}\n\t\t\t</Alert>\n\t\t</MuiSnackbar>\n\t);\n};\n\nSnackbar.defaultProps = {\n\ttype: \"default\",\n};\n","import React, { createContext, useReducer, useCallback, useEffect, Reducer, useMemo } from \"react\";\nimport { Snackbar } from \"@components/snackbar\";\n\nexport interface ISnackbarContext {\n\tsnackbar: {\n\t\tshow: (message: string, type?: SnackbarType) => void;\n\t\tsuccess: (message: string) => void;\n\t\tinfo: (message: string) => void;\n\t\twarning: (message: string) => void;\n\t\terror: (message: string) => void;\n\t};\n}\n\nexport type SnackbarType = \"default\" | \"success\" | \"info\" | \"warning\" | \"error\";\n\ninterface ISnackbarMessage {\n\treadonly type: SnackbarType;\n\treadonly message: string;\n\treadonly key: number;\n}\n\ninterface ISnackbarProviderState {\n\treadonly isOpened: boolean;\n\treadonly isHidden: boolean;\n\treadonly messageQueue: ISnackbarMessage[];\n}\n\ninterface IOpenSnackbarAction {\n\ttype: \"OPEN_SNACKBAR\";\n}\n\ninterface IAddMessageAction {\n\ttype: \"ADD_MESSAGE\";\n\tpayload: ISnackbarMessage;\n}\n\ninterface IRemoveMessageAction {\n\ttype: \"REMOVE_MESSAGE\";\n}\n\ninterface ICloseSnackbarAction {\n\ttype: \"CLOSE_SNACKBAR\";\n}\n\ntype SnackbarActions = IOpenSnackbarAction | IAddMessageAction | ICloseSnackbarAction | IRemoveMessageAction;\ntype SnackbarReducer = Reducer<ISnackbarProviderState, SnackbarActions>;\n\nconst initialState: ISnackbarProviderState = {\n\tisOpened: false,\n\tisHidden: true,\n\tmessageQueue: [],\n};\n\nconst addMessage = (payload: IAddMessageAction[\"payload\"]): IAddMessageAction => ({\n\ttype: \"ADD_MESSAGE\",\n\tpayload,\n});\n\nconst closeSnackbar: ICloseSnackbarAction = {\n\ttype: \"CLOSE_SNACKBAR\",\n};\n\nconst openSnackbar: IOpenSnackbarAction = {\n\ttype: \"OPEN_SNACKBAR\",\n};\n\nconst removeMessage: IRemoveMessageAction = {\n\ttype: \"REMOVE_MESSAGE\",\n};\n\nconst snackbarReducer: SnackbarReducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase \"OPEN_SNACKBAR\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisOpened: true,\n\t\t\t\tisHidden: false,\n\t\t\t};\n\t\tcase \"ADD_MESSAGE\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmessageQueue: [\n\t\t\t\t\t...state.messageQueue,\n\t\t\t\t\t{ type: action.payload.type, message: action.payload.message, key: action.payload.key },\n\t\t\t\t],\n\t\t\t};\n\t\tcase \"CLOSE_SNACKBAR\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisOpened: false,\n\t\t\t};\n\t\tcase \"REMOVE_MESSAGE\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisHidden: true,\n\t\t\t\tmessageQueue: state.messageQueue.slice(1),\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\n// We don't have to export this normally, but it would be good for testing purposes to expose this function.\n// So, we're exporting it, but only in test mode. In any other modes this part will be cut out by the bundler\nif (process.env.NODE_ENV === \"test\") {\n\texports.snackbarReducer = snackbarReducer;\n}\n\nexport const SnackbarContext = createContext<ISnackbarContext>({\n\tsnackbar: {\n\t\tshow: () => null,\n\t\tsuccess: () => null,\n\t\tinfo: () => null,\n\t\twarning: () => null,\n\t\terror: () => null,\n\t},\n});\n\nexport const SnackbarProvider: React.FC = (props) => {\n\tconst [state, dispatch] = useReducer(snackbarReducer, initialState);\n\n\tuseEffect(() => {\n\t\tif (state.messageQueue.length > 0 && state.isHidden) {\n\t\t\tdispatch(openSnackbar);\n\t\t}\n\t}, [state.isHidden, state.messageQueue.length]);\n\n\tconst handleShowMessage = useCallback((message: string, type: SnackbarType = \"default\") => {\n\t\tdispatch(addMessage({ type, message, key: Date.now() }));\n\t}, []);\n\n\tconst handleSuccess = useCallback(\n\t\t(message: string) => {\n\t\t\thandleShowMessage(message, \"success\");\n\t\t},\n\t\t[handleShowMessage],\n\t);\n\n\tconst handleInfo = useCallback(\n\t\t(message: string) => {\n\t\t\thandleShowMessage(message, \"info\");\n\t\t},\n\t\t[handleShowMessage],\n\t);\n\n\tconst handleWarning = useCallback(\n\t\t(message: string) => {\n\t\t\thandleShowMessage(message, \"warning\");\n\t\t},\n\t\t[handleShowMessage],\n\t);\n\n\tconst handleError = useCallback(\n\t\t(message: string) => {\n\t\t\thandleShowMessage(message, \"error\");\n\t\t},\n\t\t[handleShowMessage],\n\t);\n\n\tconst handleClose = useCallback((_: React.SyntheticEvent | MouseEvent, reason?: string) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch(closeSnackbar);\n\t}, []);\n\n\tconst handleExited = useCallback(() => {\n\t\tdispatch(removeMessage);\n\t}, []);\n\n\t// Without memoisation of this context, story for the weather forecast container is going ham and recursively calls\n\t// effect, that is responsible for error snack\n\tconst contextValue = useMemo<ISnackbarContext>(\n\t\t() => ({\n\t\t\tsnackbar: {\n\t\t\t\tshow: handleShowMessage,\n\t\t\t\tsuccess: handleSuccess,\n\t\t\t\tinfo: handleInfo,\n\t\t\t\twarning: handleWarning,\n\t\t\t\terror: handleError,\n\t\t\t},\n\t\t}),\n\t\t[handleError, handleInfo, handleShowMessage, handleSuccess, handleWarning],\n\t);\n\n\treturn (\n\t\t<SnackbarContext.Provider value={contextValue}>\n\t\t\t{props.children}\n\t\t\t<Snackbar\n\t\t\t\topen={state.isOpened}\n\t\t\t\tmessage={state.messageQueue[0]?.message ?? \"\"}\n\t\t\t\ttype={state.messageQueue[0]?.type}\n\t\t\t\tonClose={handleClose}\n\t\t\t\tonExited={handleExited}\n\t\t\t/>\n\t\t</SnackbarContext.Provider>\n\t);\n};\n","import { DateTime } from \"luxon\";\nimport { ICurrentWeather, IDailyForecast } from \"@redux/reducers/weather\";\nimport * as geolocationApi from \"@utils/geolocation-api\";\nimport * as weatherApi from \"@utils/weather-api\";\n\nexport interface IWeatherForecastResponse {\n\tcurrent: ICurrentWeather;\n\tforecast: IDailyForecast[];\n}\n\nexport const getWeatherForecast = async (city: string): Promise<IWeatherForecastResponse> => {\n\tconst geolocationResponse = await geolocationApi.search(city);\n\n\tconst coordinates = { lat: geolocationResponse.data[0].lat, lng: geolocationResponse.data[0].lon };\n\n\tconst {\n\t\tdata: { current, daily },\n\t} = await weatherApi.getForecast(+coordinates.lat, +coordinates.lng);\n\n\treturn {\n\t\tcurrent: {\n\t\t\tclouds: current.clouds,\n\t\t\tdate: current.dt * 1000,\n\t\t\tfeelsLike: current.feels_like,\n\t\t\thumidity: current.humidity,\n\t\t\tpressure: current.pressure,\n\t\t\train: current.rain?.[\"1h\"],\n\t\t\tsnow: current.snow?.[\"1h\"],\n\t\t\tsunrise: current.sunrise * 1000,\n\t\t\tsunset: current.sunset * 1000,\n\t\t\ttemperature: current.temp,\n\t\t\tuvIndex: current.uvi,\n\t\t\tvisibility: current.visibility,\n\t\t\tweather: current.weather[0],\n\t\t\twindDeg: current.wind_deg,\n\t\t\twindSpeed: current.wind_speed,\n\t\t},\n\t\tforecast: daily.map((item) => ({\n\t\t\tdayOfWeek: DateTime.fromMillis(item.dt * 1000).weekdayLong,\n\t\t\tminTemperature: item.temp.min,\n\t\t\tmaxTemperature: item.temp.max,\n\t\t})),\n\t};\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk } from \"@redux/store\";\nimport { getWeatherForecast } from \"@services/weather\";\n\nexport interface IDailyForecast {\n\treadonly minTemperature: number;\n\treadonly maxTemperature: number;\n\treadonly dayOfWeek: string;\n}\n\nexport interface ICurrentWeather {\n\treadonly date: number;\n\treadonly sunrise: number;\n\treadonly sunset: number;\n\treadonly temperature: number;\n\treadonly feelsLike: number;\n\treadonly pressure: number;\n\treadonly humidity: number;\n\treadonly clouds: number;\n\treadonly uvIndex: number;\n\treadonly visibility: number;\n\treadonly windSpeed: number;\n\treadonly windDeg: number;\n\treadonly rain?: number;\n\treadonly snow?: number;\n\treadonly weather: {\n\t\treadonly id: number;\n\t\treadonly main: string;\n\t\treadonly description: string;\n\t\treadonly icon: string;\n\t};\n}\nexport interface IWeatherState {\n\treadonly isLoading: boolean;\n\treadonly errorMessage?: string;\n\treadonly current: ICurrentWeather | null;\n\treadonly forecast: IDailyForecast[];\n}\n\nconst initialState: IWeatherState = {\n\tcurrent: null,\n\tforecast: [],\n\tisLoading: false,\n\terrorMessage: \"\",\n};\n\nconst weatherSlice = createSlice({\n\tname: \"weather\",\n\tinitialState,\n\treducers: {\n\t\tgetForecastStart(state) {\n\t\t\tstate.isLoading = true;\n\t\t},\n\t\tgetForecastSuccess(state, action: PayloadAction<Pick<IWeatherState, \"current\" | \"forecast\">>) {\n\t\t\tstate.isLoading = false;\n\t\t\tstate.errorMessage = \"\";\n\t\t\tstate.current = action.payload.current;\n\t\t\tstate.forecast = action.payload.forecast;\n\t\t},\n\t\tgetForecastError(state, action: PayloadAction<string>) {\n\t\t\tstate.isLoading = false;\n\t\t\tstate.errorMessage = action.payload;\n\t\t},\n\t},\n});\n\nexport const { getForecastStart, getForecastError, getForecastSuccess } = weatherSlice.actions;\n\nexport type WeatherActions =\n\t| ReturnType<typeof getForecastStart>\n\t| ReturnType<typeof getForecastError>\n\t| ReturnType<typeof getForecastSuccess>;\n\nexport const fetchWeatherForecast = (city: string): AppThunk<Promise<void>> => async (dispatch) => {\n\tdispatch(getForecastStart());\n\n\ttry {\n\t\tconst forecast = await getWeatherForecast(city);\n\n\t\tdispatch(getForecastSuccess(forecast));\n\t} catch (error) {\n\t\tdispatch(getForecastError(error.toString()));\n\t}\n};\n\nexport default weatherSlice.reducer;\n"],"sourceRoot":""}