module.exports = {
	parser: "@typescript-eslint/parser",
	extends: [
		"plugin:react/recommended",
		"plugin:@typescript-eslint/recommended",
		"prettier/@typescript-eslint",
		"plugin:prettier/recommended",
		"plugin:jsx-a11y/recommended",
		"plugin:import/errors",
		"plugin:import/warnings",
		"plugin:import/typescript",
	],
	plugins: ["react-hooks"],
	settings: {
		react: {
			createClass: "createReactClass",
			pragma: "React",
			version: "detect",
		},
		"import/resolver": {
			typescript: {},
		},
	},
	parserOptions: {
		ecmaVersion: 2018,
		sourceType: "module",
		project: "./tsconfig.json",
	},
	rules: {
		"comma-dangle": ["error", "always-multiline"],
		"no-console": "warn",
		eqeqeq: ["error", "allow-null"],
		"no-var": "error",
		"arrow-body-style": "warn",
		"arrow-parens": "error",
		"arrow-spacing": "warn",
		"no-useless-constructor": "error",
		"object-shorthand": ["warn", "properties"],
		"prefer-arrow-callback": "error",
		"prefer-const": "error",
		"prefer-rest-params": "error",
		"prefer-spread": "error",
		"brace-style": ["error", "1tbs"],
		"array-bracket-spacing": ["warn", "never"],
		camelcase: ["error", { properties: "always" }],
		"comma-spacing": "error",
		"comma-style": "error",
		"computed-property-spacing": "error",
		"consistent-this": "error",
		"eol-last": "warn",
		indent: "off", //covered by prettier
		"jsx-quotes": ["error", "prefer-double"],
		"key-spacing": ["warn", { beforeColon: false, afterColon: true }],
		"keyword-spacing": "error",
		"new-parens": "error",
		"newline-after-var": "error",
		"no-spaced-func": "error",
		"no-trailing-spaces": "warn",
		"no-unneeded-ternary": "error",
		"object-curly-spacing": ["error", "always"],
		"operator-linebreak": "off",
		"padded-blocks": ["error", "never"],
		"quote-props": ["error", "as-needed"],
		quotes: ["error", "double", { avoidEscape: true }],
		"semi-spacing": ["error", { before: false, after: true }],
		semi: "error",
		"space-before-blocks": "error",
		"space-before-function-paren": ["error", { anonymous: "never", named: "never", asyncArrow: "always" }],
		"space-infix-ops": "error",
		"space-unary-ops": "error",
		"no-sync": "error",
		"valid-jsdoc": "error",
		"valid-typeof": "error",
		"no-unexpected-multiline": "error",
		"no-unreachable": "error",
		"use-isnan": "error",
		"no-fallthrough": "error",
		"dot-location": ["error", "property"],
		"no-eval": "error",
		"no-else-return": "error",
		"no-empty-pattern": "warn",
		"no-debugger": "warn",
		"no-alert": "warn",
		"no-caller": "error",
		"no-case-declarations": "error",
		"no-extend-native": "error",
		"no-labels": "error",
		"no-floating-decimal": "error",
		"no-lone-blocks": "error",
		"no-multi-spaces": ["error", { exceptions: { Property: true } }],
		"no-multi-str": "error",
		"no-native-reassign": "error",
		"no-octal": "error",
		"no-param-reassign": "error",
		"no-self-assign": "error",
		"no-self-compare": "error",
		"no-unmodified-loop-condition": "error",
		"no-unused-expressions": "error",
		"no-useless-call": "error",
		"no-useless-concat": "error",
		"no-with": "error",
		yoda: "error",
		//React hooks rules
		"react-hooks/rules-of-hooks": "error",
		"react-hooks/exhaustive-deps": "warn",
		//Typescript related rules
		"import/named": "off", //Doesn't work correctly with typescript typings
		"@typescript-eslint/no-unused-vars": ["error", { args: "after-used" }],
		"@typescript-eslint/interface-name-prefix": 0,
		"@typescript-eslint/no-non-null-assertion": 0,
		"@typescript-eslint/explicit-function-return-type": [
			"error",
			{ allowExpressions: true, allowTypedFunctionExpressions: true },
		],
		"@typescript-eslint/no-explicit-any": "off",
	},
	overrides: [
		{
			files: ["**/*.tsx"],
			rules: {
				"react/prop-types": "off",
			},
		},
		{
			files: ["**/*.js", "**/*.jsx"],
			rules: {
				"@typescript-eslint/no-var-requires": "off",
			},
		},
	],
};
